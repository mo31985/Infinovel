{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","currentChapter","setCurrentChapter","useState","choices","setChoices","isLoadingText","setIsLoadingText","userId","setUserId","db","setDb","auth","setAuth","isAuthReady","setIsAuthReady","error","setError","saveMessage","setSaveMessage","loadMessage","setLoadMessage","isSaving","setIsSaving","isLoadingSave","setIsLoadingSave","chapterChoiceStats","setChapterChoiceStats","initialStoryContext","chapterId","title","content","text","choiceId","appId","__app_id","useEffect","console","log","firebaseConfigRaw","window","__firebase_config","firebaseConfig","JSON","parse","parseError","Object","keys","length","apiKey","authDomain","projectId","app","initializeApp","authInstance","getAuth","firestoreInstance","getFirestore","onAuthStateChanged","async","_authInstance$current","user","initialAuthToken","__initial_auth_token","signInWithCustomToken","signInAnonymously","concat","message","currentUserId","currentUser","uid","loadProgress","useCallback","userUid","saveDocRef","doc","docSnap","getDoc","exists","data","currentChapterState","err","setTimeout","loaded","prevError","loadInitialStory","getCurrentChapterUniqueId","chapter","baseId","sanitizeId","str","replace","toLowerCase","sanitizedProvidedId","titlePart","contentPart","substring","Date","now","chapterUniqueId","choiceStatsCollectionRef","collection","statsDocRef","path","total","totalSelectionsForChapter","stats","forEach","choice","count","totalCount","percentage","toFixed","fetchChoiceStats","handleChoice","choiceText","userChoiceText","selectedChoiceId","choicesArray","choiceFound","updatedChoices","map","_objectSpread","increment","push","updateDoc","lastUpdated","initialChoices","c","selectedChoiceIndex","findIndex","setDoc","chapterTitle","chapterContentPreview","Math","min","statsErr","currentStoryContext","join","textPrompt","chatHistory","role","parts","textPayload","contents","generationConfig","responseMimeType","responseSchema","type","properties","__api_key","String","textApiUrl","textResponse","fetch","method","headers","body","stringify","ok","Error","status","textResult","json","parsedChapter","candidates","jsonText","generateNextChapter","React","createElement","className","Fragment","paragraph","index","key","onClick","lastSavedAt","merge","disabled","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.dbc9c5ef.chunk.js","sourcesContent":["/* global __app_id, __firebase_config, __initial_auth_token, __api_key */\nimport React, { useState, useEffect, useCallback } from 'react'; // 引入 useCallback\nimport { initializeApp } from 'firebase/app';\nimport { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from 'firebase/auth';\nimport { getFirestore, doc, setDoc, getDoc, updateDoc, increment, collection } from 'firebase/firestore'; // 引入 Firestore 相關函數\n\nfunction App() {\n  const [currentChapter, setCurrentChapter] = useState(null);\n  const [choices, setChoices] = useState([]);\n  const [isLoadingText, setIsLoadingText] = useState(false); // 文本生成載入狀態\n  const [userId, setUserId] = useState('載入中...');\n  const [db, setDb] = useState(null);\n  const [auth, setAuth] = useState(null);\n  const [isAuthReady, setIsAuthReady] = useState(false);\n  const [error, setError] = useState(null); // 錯誤狀態\n  const [saveMessage, setSaveMessage] = useState(''); // 保存進度訊息\n  const [loadMessage, setLoadMessage] = useState(''); // 載入進度訊息\n  const [isSaving, setIsSaving] = useState(false); // 保存中狀態\n  const [isLoadingSave, setIsLoadingSave] = useState(false); // 載入保存狀態\n  const [chapterChoiceStats, setChapterChoiceStats] = useState({}); // 儲存當前章節的選擇統計\n\n  // 模擬故事的初始上下文，現在加入了更多前設和細節\n  const initialStoryContext = {\n    // 為初始章節添加一個唯一的 ID，用於統計追蹤\n    chapterId: 'intro_chapter_1',\n    title: '迷霧中的線索：倫敦的蒸汽與魔法',\n    content: [\n      '在維多利亞時代的倫敦，蒸汽機的轟鳴聲與古老魔法的低語交織。這個城市既是科技的巔峰，也是神秘事件的溫床。艾倫偵探，一位以敏銳洞察力和對超自然現象的獨特理解而聞名的私家偵探，此時正坐在他那間瀰漫著煙草味的辦公室裡。他的風衣搭在椅背上，桌上堆滿了未解的卷宗和一杯冷掉的紅茶。艾倫雖然恐高，卻總是被捲入與高處相關的案件，這成了他職業生涯中一個奇特的諷刺。',\n      '窗外，倫敦特區永不散去的蒸汽迷霧像一條巨龍般盤踞，吞噬著光線與聲音。一封緊急電報打破了清晨的寧靜，電報來自泰晤士河畔的皇家科學院，內容簡潔而令人不安：著名發明家維克多·格雷森博士離奇失蹤了。格雷森博士以其在「時間機械」領域的突破性研究而聞名，他的失蹤無疑將引發巨大波瀾。',\n      '艾倫抵達格雷森博士的實驗室，那裡一片狼藉，精密齒輪和扭曲的電線散落一地，空氣中瀰漫著臭氧和燒焦金屬的氣味。這不是普通的失竊，更像是一場混亂的搏鬥，或是某種實驗失控。在凌亂的書桌上，艾倫的目光被一張被壓在厚重機械手稿下的紙條吸引。上面潦草地寫著一行字：「時鐘塔，午夜，等待。」字跡扭曲，似乎在極度恐懼或倉促中寫下。',\n      '艾倫皺起了眉頭。時鐘塔，城市的地標，也是時間守護者組織的秘密據點之一。這張紙條是格雷森博士留下的最後線索嗎？還是某種精心設計的陷阱？他必須做出決定，這將引導他走向倫敦最深處的秘密。',\n    ],\n    choices: [\n      { text: '立即前往時鐘塔，看看午夜有什麼在等待。', choiceId: 'to_clock_tower' },\n      { text: '先仔細調查格雷森博士的實驗室，尋找更多隱藏線索。', choiceId: 'investigate_lab_thoroughly' },\n      { text: '回到辦公室，研究格雷森博士的背景資料和「時間機械」的理論。', choiceId: 'research_grayson_background' },\n    ],\n  };\n\n  // 將 appId 聲明移到頂部，解決 'appId' is assigned a value but never used 警告\n  const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';\n\n  // Firebase 初始化\n  useEffect(() => {\n    console.log('Firebase init useEffect triggered.');\n    try {\n      // 確保從 window 對象獲取全局變數，因為它們是在 index.html 中設定的\n      const firebaseConfigRaw = typeof window.__firebase_config !== 'undefined' ? window.__firebase_config : '{}';\n      let firebaseConfig = {};\n      try {\n        firebaseConfig = JSON.parse(firebaseConfigRaw);\n      } catch (parseError) {\n        console.error(\"Failed to parse Firebase config JSON:\", parseError);\n        setError(\"Firebase 配置格式錯誤。應用程式功能受限。\");\n        setUserId('無法初始化 Firebase');\n        setIsAuthReady(true);\n        return;\n      }\n      \n      console.log('Firebase config:', firebaseConfig);\n\n      // 更嚴格地檢查 Firebase 配置是否有效\n      if (Object.keys(firebaseConfig).length === 0 || \n          !firebaseConfig.apiKey || \n          !firebaseConfig.authDomain || \n          !firebaseConfig.projectId) { \n        console.error(\"Firebase config is empty or missing critical keys (apiKey, authDomain, projectId). Firebase will not be initialized.\");\n        setError(\"Firebase 配置為空或缺少關鍵金鑰 (apiKey, authDomain, projectId)。應用程式功能受限。\");\n        setUserId('無法初始化 Firebase');\n        setIsAuthReady(true); // 即使出錯也標記為認證就緒，以便顯示錯誤訊息\n        return;\n      }\n\n      const app = initializeApp(firebaseConfig);\n      const authInstance = getAuth(app);\n      const firestoreInstance = getFirestore(app);\n      setAuth(authInstance);\n      setDb(firestoreInstance);\n      console.log('Firebase app, auth, db instances set.');\n\n      onAuthStateChanged(authInstance, async (user) => {\n        console.log('onAuthStateChanged triggered. User:', user);\n        if (!user) {\n          try {\n            console.log('No user signed in. Attempting sign-in...');\n            const initialAuthToken = typeof window.__initial_auth_token !== 'undefined' ? window.__initial_auth_token : '';\n            if (initialAuthToken) {\n              console.log('Signing in with custom token.');\n              await signInWithCustomToken(authInstance, initialAuthToken);\n            } else {\n              console.log('Signing in anonymously.');\n              await signInAnonymously(authInstance);\n            }\n            console.log('Sign-in attempt finished.');\n          } catch (error) {\n            console.error(\"Firebase authentication failed:\", error);\n            setError(`Firebase 認證失敗: ${error.message}. 部分功能可能受限。`);\n          }\n        }\n        const currentUserId = authInstance.currentUser?.uid || '匿名用戶';\n        console.log('Setting userId:', currentUserId);\n        setUserId(currentUserId);\n        console.log('Setting isAuthReady to true.');\n        setIsAuthReady(true);\n      });\n    } catch (error) {\n      console.error(\"Failed to initialize Firebase:\", error);\n      setError(`Firebase 初始化失敗: ${error.message}. 請檢查控制台。`);\n      setIsAuthReady(true);\n    }\n  }, []);\n\n  // 保存進度到 Firestore\n  const saveProgress = async () => {\n    if (!db || !auth || !auth.currentUser || !currentChapter) {\n      setError('無法保存進度：未登入或無當前章節數據。');\n      return;\n    }\n    setIsSaving(true);\n    setSaveMessage('正在保存進度...');\n    setError(null);\n\n    const userUid = auth.currentUser.uid;\n    const saveDocRef = doc(db, `artifacts/${appId}/users/${userUid}/saved_stories`, 'main_story'); // 使用頂部聲明的 appId\n\n    try {\n      await setDoc(saveDocRef, {\n        currentChapterState: currentChapter, // 保存整個章節狀態\n        lastSavedAt: new Date(),\n      }, { merge: true }); // 使用 merge 以便只更新指定字段\n\n      setSaveMessage('進度保存成功！');\n    } catch (err) {\n      console.error(\"Error saving progress:\", err);\n      setError(`保存進度失敗: ${err.message}`);\n      setSaveMessage('進度保存失敗！');\n    } finally {\n      setIsSaving(false);\n      setTimeout(() => setSaveMessage(''), 3000); // 3秒後清除訊息\n    }\n  };\n\n  // 從 Firestore 載入進度\n  const loadProgress = useCallback(async () => { // 將 loadProgress 包裹在 useCallback 中\n    if (!db || !auth || !auth.currentUser) {\n      setError('無法載入進度：未登入。');\n      return false;\n    }\n    setIsLoadingSave(true);\n    setLoadMessage('正在載入進度...');\n    setError(null);\n\n    const userUid = auth.currentUser.uid;\n    const saveDocRef = doc(db, `artifacts/${appId}/users/${userUid}/saved_stories`, 'main_story'); // 使用頂部聲明的 appId\n\n    try {\n      const docSnap = await getDoc(saveDocRef);\n      if (docSnap.exists()) {\n        const data = docSnap.data();\n        if (data.currentChapterState) {\n          setCurrentChapter(data.currentChapterState);\n          setChoices(data.currentChapterState.choices || []);\n          setLoadMessage('進度載入成功！');\n          return true;\n        }\n      }\n      setLoadMessage('沒有找到保存的進度。');\n      return false;\n    } catch (err) {\n      console.error(\"Error loading progress:\", err);\n      setError(`載入進度失敗: ${err.message}`);\n      setLoadMessage('載入進度失敗！');\n      return false;\n    } finally {\n      setIsLoadingSave(false);\n      setTimeout(() => setLoadMessage(''), 3000); // 3秒後清除訊息\n    }\n  }, [db, auth, appId]); // loadProgress 的依賴\n\n  // 載入初始章節或已保存的進度\n  useEffect(() => {\n    const loadInitialStory = async () => {\n      // 只有當認證就緒、db 和 auth 實例存在，且 userId 不再是 '載入中...' 時才嘗試載入\n      if (isAuthReady && db && auth && userId !== '載入中...') {\n        setIsLoadingSave(true);\n        setLoadMessage('正在載入您的進度...');\n        const loaded = await loadProgress(); // 嘗試載入進度\n        setIsLoadingSave(false);\n        if (!loaded) {\n          // 如果沒有保存的進度，則載入初始章節\n          setCurrentChapter(initialStoryContext);\n          setChoices(initialStoryContext.choices);\n          setLoadMessage('沒有找到保存的進度，從頭開始。');\n        } else {\n          setLoadMessage('進度載入成功！');\n        }\n        setTimeout(() => setLoadMessage(''), 3000); // 3秒後清除訊息\n      } else if (isAuthReady && !db) { // 如果認證就緒但db不存在 (Firebase初始化失敗)\n        setCurrentChapter(initialStoryContext); // 仍然顯示初始故事，但功能受限\n        setChoices(initialStoryContext.choices);\n        setLoadMessage('Firebase 未初始化，無法載入/保存進度。');\n        setError(prevError => prevError || 'Firebase 服務不可用，部分功能受限。'); // 顯示通用錯誤\n      }\n    };\n    loadInitialStory();\n  }, [isAuthReady, db, auth, userId, initialStoryContext, loadProgress]); // 依賴於認證狀態、db、auth 和 userId\n\n  // 獲取當前章節的唯一 ID，用於統計追蹤\n  const getCurrentChapterUniqueId = useCallback((chapter) => {\n    let baseId = '';\n\n    // 函數用於清理字串，只保留 Firestore 文檔 ID 允許的字符\n    const sanitizeId = (str) => {\n      // 允許字母、數字、連字號(-) 和底線(_)\n      return str.replace(/[^a-zA-Z0-9_-]/g, '').toLowerCase();\n    };\n\n    // 嘗試 1: 使用現有的 chapterId (如果存在且有效)\n    if (chapter && chapter.chapterId && typeof chapter.chapterId === 'string' && chapter.chapterId.length > 0) {\n      const sanitizedProvidedId = sanitizeId(chapter.chapterId);\n      if (sanitizedProvidedId.length > 0) {\n        baseId = sanitizedProvidedId;\n      }\n    }\n\n    // 嘗試 2: 如果沒有有效的 chapterId，則從標題和內容生成一個\n    if (baseId.length === 0 && chapter) {\n      let titlePart = chapter.title ? sanitizeId(chapter.title) : '';\n      let contentPart = (chapter.content && chapter.content.length > 0 && chapter.content[0])\n        ? sanitizeId(chapter.content[0].substring(0, 30))\n        : '';\n\n      // 組合部分，確保至少一個非空\n      if (titlePart.length > 0 && contentPart.length > 0) {\n        baseId = `${titlePart}_${contentPart}`;\n      } else if (titlePart.length > 0) {\n        baseId = titlePart;\n      } else if (contentPart.length > 0) {\n        baseId = contentPart;\n      }\n    }\n\n    // 最終備用: 如果 baseId 仍然為空，使用一個通用前綴\n    if (baseId.length === 0) {\n      baseId = 'auto_gen_chapter';\n    }\n\n    // 始終附加時間戳以確保唯一性並保證 ID 非空\n    return `${baseId}_${Date.now()}`;\n  }, []);\n\n  // 載入當前章節的選擇統計\n  useEffect(() => {\n    const fetchChoiceStats = async () => {\n      if (!db || !currentChapter) {\n        setChapterChoiceStats({});\n        return;\n      }\n      const chapterUniqueId = getCurrentChapterUniqueId(currentChapter);\n      \n      // 更明確的 Firestore 路徑構建: artifacts/{appId}/public/data/choice_stats/{chapterUniqueId}\n      const choiceStatsCollectionRef = collection(db, 'artifacts', appId, 'public', 'data', 'choice_stats');\n      const statsDocRef = doc(choiceStatsCollectionRef, chapterUniqueId);\n\n      console.log('DEBUG: Fetching stats from path:', statsDocRef.path); // 偵錯日誌\n\n      try {\n        const docSnap = await getDoc(statsDocRef);\n        if (docSnap.exists()) {\n          const data = docSnap.data();\n          const total = data.totalSelectionsForChapter || 0;\n          const stats = {};\n          if (data.choices) {\n            data.choices.forEach(choice => {\n              stats[choice.choiceId] = {\n                count: choice.totalCount,\n                percentage: total > 0 ? ((choice.totalCount / total) * 100).toFixed(1) : 0\n              };\n            });\n          }\n          setChapterChoiceStats(stats);\n        } else {\n          setChapterChoiceStats({}); // 沒有統計數據\n        }\n      } catch (err) {\n        console.error(\"Error fetching choice stats:\", err);\n        setChapterChoiceStats({});\n      }\n    };\n\n    fetchChoiceStats();\n  }, [db, currentChapter, appId, getCurrentChapterUniqueId]); // 依賴於 db 和 currentChapter\n\n  // 調用 LLM 生成下一章節內容\n  const generateNextChapter = async (userChoiceText, selectedChoiceId) => { // 接收 selectedChoiceId\n    setIsLoadingText(true);\n    setError(null);\n    setChoices([]);\n    setChapterChoiceStats({}); // 清空舊的統計數據\n\n    // --- 更新選擇統計到 Firestore ---\n    if (db && currentChapter && selectedChoiceId) {\n      const chapterUniqueId = getCurrentChapterUniqueId(currentChapter);\n\n      // 更明確的 Firestore 路徑構建: artifacts/{appId}/public/data/choice_stats/{chapterUniqueId}\n      const choiceStatsCollectionRef = collection(db, 'artifacts', appId, 'public', 'data', 'choice_stats');\n      const statsDocRef = doc(choiceStatsCollectionRef, chapterUniqueId);\n\n      console.log('DEBUG: Updating stats at path:', statsDocRef.path); // 偵錯日誌\n\n      try {\n        // 嘗試獲取文檔，如果不存在則創建\n        const docSnap = await getDoc(statsDocRef);\n        if (!docSnap.exists()) {\n          // 如果文檔不存在，初始化它\n          const initialChoices = currentChapter.choices.map(c => ({\n            choiceId: c.choiceId,\n            text: c.text,\n            totalCount: 0\n          }));\n          const selectedChoiceIndex = initialChoices.findIndex(c => c.choiceId === selectedChoiceId);\n          if (selectedChoiceIndex !== -1) {\n            initialChoices[selectedChoiceIndex].totalCount = 1; // 設置當前選擇為 1\n          }\n\n          await setDoc(statsDocRef, {\n            chapterTitle: currentChapter.title,\n            chapterContentPreview: currentChapter.content[0].substring(0, Math.min(currentChapter.content[0].length, 100)), // 確保 substring 不會超出長度\n            choices: initialChoices,\n            totalSelectionsForChapter: 1,\n            lastUpdated: new Date()\n          });\n        } else {\n          // 如果文檔存在，更新對應的選擇計數和總計數\n          const currentData = docSnap.data();\n          const choicesArray = currentData.choices || [];\n          let choiceFound = false;\n          const updatedChoices = choicesArray.map(choice => {\n            if (choice.choiceId === selectedChoiceId) {\n              choiceFound = true;\n              return { ...choice, totalCount: increment(1) };\n            }\n            return choice;\n          });\n\n          if (!choiceFound) {\n            // 如果這個選擇是新的（不應該發生，但以防萬一）\n            updatedChoices.push({\n              choiceId: selectedChoiceId,\n              text: userChoiceText, // 使用傳入的文本\n              totalCount: 1\n            });\n          }\n\n          await updateDoc(statsDocRef, {\n            choices: updatedChoices,\n            totalSelectionsForChapter: increment(1),\n            lastUpdated: new Date()\n          });\n        }\n      } catch (statsErr) {\n        console.error(\"Error updating choice statistics:\", statsErr);\n        // 不阻止故事生成，只記錄錯誤\n      }\n    }\n    // --- 結束更新選擇統計 ---\n\n    // 構建 LLM 提示詞 (文本生成)\n    const currentStoryContext = currentChapter ? currentChapter.content.join('\\n') : '';\n    const textPrompt = `\n      你是一個互動式小說的作者。請根據以下故事背景和讀者的選擇，生成下一章節的內容。\n      請確保故事邏輯連貫、富有創意，並包含一個新的選擇點，讓讀者繼續影響故事走向。\n      \n      故事背景（上一章節內容）：\n      ${currentStoryContext}\n\n      讀者的選擇是：\n      ${userChoiceText}\n\n      請以 JSON 格式返回下一章節的標題、內容（多個段落組成的陣列）和新的選擇（每個選擇包含 text 和一個簡短的 choiceId）。\n      如果故事可以結束，則 choices 陣列為空。\n\n      JSON 格式範例：\n      {\n        \"title\": \"新章節標題\",\n        \"content\": [\n          \"第一段內容...\",\n          \"第二段內容...\"\n        ],\n        \"choices\": [\n          {\"text\": \"選擇一的文字\", \"choiceId\": \"choice_id_1\"},\n          {\"text\": \"選擇二的文字\", \"choiceId\": \"choice_id_2\"}\n        ]\n      }\n    `;\n\n    let chatHistory = [];\n    chatHistory.push({ role: \"user\", parts: [{ text: textPrompt }] });\n\n    const textPayload = {\n      contents: chatHistory,\n      generationConfig: {\n        responseMimeType: \"application/json\",\n        responseSchema: {\n          type: \"OBJECT\",\n          properties: {\n            \"chapterId\": { \"type\": \"STRING\" }, // LLM 生成的章節也需要 ID\n            \"title\": { \"type\": \"STRING\" },\n            \"content\": {\n              \"type\": \"ARRAY\",\n              \"items\": { \"type\": \"STRING\" }\n            },\n            \"choices\": {\n              \"type\": \"ARRAY\",\n              \"items\": {\n                \"type\": \"OBJECT\",\n                \"properties\": {\n                  \"text\": { \"type\": \"STRING\" },\n                  \"choiceId\": { \"type\": \"STRING\" }\n                },\n                \"propertyOrdering\": [\"text\", \"choiceId\"]\n              }\n            }\n          },\n          \"propertyOrdering\": [\"chapterId\", \"title\", \"content\", \"choices\"]\n        }\n      }\n    };\n\n    // 獲取 API 金鑰：確保 apiKey 始終為字串\n    const apiKey = (typeof window.__api_key !== 'undefined' && window.__api_key !== null) ? String(window.__api_key) : \"\"; // 從 window 對象獲取\n    console.log('Debug: Text API Key status (first 5 chars):', apiKey ? apiKey.substring(0, 5) + '...' : 'EMPTY/NOT_PROVIDED');\n\n    const textApiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;\n\n    try {\n      const textResponse = await fetch(textApiUrl, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(textPayload)\n      });\n\n      if (!textResponse.ok) {\n        throw new Error(`文本 API 請求失敗，狀態碼: ${textResponse.status}`);\n      }\n\n      const textResult = await textResponse.json();\n      console.log('LLM Text Raw Result:', textResult);\n\n      let parsedChapter = null;\n      if (textResult.candidates && textResult.candidates.length > 0 &&\n          textResult.candidates[0].content && textResult.candidates[0].content.parts &&\n          textResult.candidates[0].content.parts.length > 0) {\n        const jsonText = textResult.candidates[0].content.parts[0].text;\n        parsedChapter = JSON.parse(jsonText);\n        // 確保 LLM 返回的章節有 chapterId，如果沒有則生成一個\n        if (!parsedChapter.chapterId) {\n            parsedChapter.chapterId = getCurrentChapterUniqueId(parsedChapter); // 使用新的 getCurrentChapterUniqueId\n        }\n        setCurrentChapter(parsedChapter);\n        setChoices(parsedChapter.choices || []);\n      } else {\n        setError('LLM 文本回應格式不正確或內容缺失。');\n        setCurrentChapter({\n          title: '生成失敗',\n          content: ['抱歉，AI 在生成下一章節文本時遇到問題。請重試或選擇其他選項。'],\n          choices: [],\n        });\n        setChoices([]);\n      }\n      setIsLoadingText(false); // 文本載入完成\n\n    } catch (err) {\n      console.error(\"Error generating chapter:\", err);\n      setError(`生成章節時發生錯誤: ${err.message}. 請檢查控制台獲取更多詳細信息。`);\n      setCurrentChapter({\n        title: '生成失敗',\n        content: ['抱歉，AI 在生成下一章節時遇到問題。請重試或選擇其他選項。'],\n        choices: [],\n      });\n      setChoices([]);\n      setIsLoadingText(false);\n    }\n  };\n\n  // 處理讀者選擇\n  const handleChoice = (choiceText, choiceId) => { // 接收 choiceId\n    generateNextChapter(choiceText, choiceId); // 傳遞 choiceId\n  };\n\n  if (!isAuthReady) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen bg-gray-100\">\n        <div className=\"text-lg font-semibold text-gray-700 font-inter\">正在載入介面...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-100 to-gray-300 flex flex-col items-center p-4 sm:p-6\">\n      {/* 用戶ID顯示 */}\n      <div className=\"w-full max-w-4xl text-right text-sm text-gray-600 mb-4\">\n        用戶ID: <span className=\"font-mono text-blue-700 break-all\">{userId}</span>\n      </div>\n\n      {/* 小說標題 */}\n      <header className=\"w-full max-w-4xl bg-white shadow-lg rounded-xl p-6 mb-8 text-center\">\n        <h1 className=\"text-4xl sm:text-5xl font-extrabold text-gray-900 mb-2 font-inter\">\n          互動式生成小說\n        </h1>\n        <p className=\"text-lg text-gray-600 font-inter\">你的選擇，構築故事</p>\n      </header>\n\n      {/* 故事內容區 */}\n      <main className=\"w-full max-w-4xl bg-white shadow-lg rounded-xl p-6 mb-8 flex-grow\">\n        {error && (\n          <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4\" role=\"alert\">\n            <strong className=\"font-bold\">錯誤!</strong>\n            <span className=\"block sm:inline\"> {error}</span>\n          </div>\n        )}\n\n        {/* 保存/載入訊息顯示 */}\n        {(saveMessage || loadMessage) && (\n          <div className={`mb-4 p-3 rounded-lg text-center font-semibold ${saveMessage ? 'bg-green-100 text-green-700' : 'bg-blue-100 text-blue-700'}`}>\n            {saveMessage || loadMessage}\n          </div>\n        )}\n\n        {currentChapter && (\n          <>\n            <h2 className=\"text-3xl sm:text-4xl font-bold text-gray-800 mb-6 font-inter\">\n              {currentChapter.title}\n            </h2>\n            \n            <div className=\"text-gray-700 leading-relaxed text-lg sm:text-xl font-inter\">\n              {currentChapter.content.map((paragraph, index) => (\n                <p key={index} className=\"mb-4\">\n                  {paragraph}\n                </p>\n              ))}\n            </div>\n          </>\n        )}\n\n        {/* 文本載入指示器 */}\n        {isLoadingText && (\n          <div className=\"flex justify-center items-center py-8\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-4 border-blue-500\"></div>\n            <p className=\"ml-4 text-xl text-blue-600 font-semibold font-inter\">AI 正在生成下一章節文本...</p>\n          </div>\n        )}\n\n        {/* 選擇按鈕區 */}\n        {!isLoadingText && choices.length > 0 && (\n          <div className=\"mt-8 pt-6 border-t-2 border-gray-200\">\n            <h3 className=\"text-2xl font-bold text-gray-800 mb-4 font-inter\">你的選擇：</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              {choices.map((choice, index) => {\n                const stats = chapterChoiceStats[choice.choiceId];\n                const percentage = stats ? stats.percentage : 0;\n                return (\n                  <button\n                    key={index}\n                    onClick={() => handleChoice(choice.text, choice.choiceId)} // 傳遞 choiceId\n                    className=\"bg-blue-600 hover:bg-blue-700 text-white font-semibold py-4 px-6 rounded-lg shadow-md transition duration-300 ease-in-out transform hover:scale-105\n                               focus:outline-none focus:ring-4 focus:ring-blue-300 text-lg font-inter flex justify-between items-center\"\n                  >\n                    <span>{choice.text}</span>\n                    {stats && (\n                      <span className=\"ml-4 text-sm bg-blue-700 px-2 py-1 rounded-full\">{percentage}%</span>\n                    )}\n                  </button>\n                );\n              })}\n            </div>\n          </div>\n        )}\n\n        {/* 故事結束提示 (當 LLM 返回空 choices 時) */}\n        {!isLoadingText && choices.length === 0 && currentChapter && (\n          <div className=\"mt-8 pt-6 border-t-2 border-gray-200 text-center text-xl text-gray-600 font-inter\">\n            故事暫時告一段落，或者已到達結局。感謝你的參與！\n          </div>\n        )}\n      </main>\n\n      {/* 保存/載入按鈕區 */}\n      <div className=\"w-full max-w-4xl bg-white shadow-lg rounded-xl p-4 mt-8 flex justify-center gap-4\">\n        <button\n          onClick={saveProgress}\n          disabled={isSaving || isLoadingSave || !auth || !auth.currentUser || !currentChapter}\n          className=\"bg-green-600 hover:bg-green-700 text-white font-semibold py-3 px-6 rounded-lg shadow-md transition duration-300 ease-in-out transform hover:scale-105\n                     focus:outline-none focus:ring-4 focus:ring-green-300 text-lg font-inter disabled:opacity-50 disabled:cursor-not-allowed\"\n        >\n          {isSaving ? '正在保存...' : '保存進度'}\n        </button>\n        <button\n          onClick={loadProgress}\n          disabled={isLoadingSave || isSaving || !auth || !auth.currentUser}\n          className=\"bg-purple-600 hover:bg-purple-700 text-white font-semibold py-3 px-6 rounded-lg shadow-md transition duration-300 ease-in-out transform hover:scale-105\n                     focus:outline-none focus:ring-4 focus:ring-purple-300 text-lg font-inter disabled:opacity-50 disabled:cursor-not-allowed\"\n        >\n          {isLoadingSave ? '正在載入...' : '載入進度'}\n        </button>\n      </div>\n\n      {/* 底部信息 */}\n      <footer className=\"w-full max-w-4xl text-center text-gray-600 mt-8\">\n        <p className=\"text-sm font-inter\">\n          Powered by AI Generative Models & Your Imagination.\n        </p>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}